
<MudDataGrid T="ExerciseDataViewModel"  Items="@Exercises" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Exercises</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="ExerciseDataViewModel" Field="Id"/>
        <Column T="ExerciseDataViewModel" Field="Name"/>
        <Column T="ExerciseDataViewModel" Field="Description"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ExerciseDataViewModel" />
    </PagerContent>
</MudDataGrid>



@code {


    [Parameter]
    public List<ExerciseDataViewModel> Exercises { get; set; } = new List<ExerciseDataViewModel>();
    
    private string _searchString;

    private Func<ExerciseDataViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        //Workouts = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    }

    void RowClicked(DataGridRowClickEventArgs<ExerciseDataViewModel> args)
    {
        //TODO -  Navigate to the Exercise page
    }


}
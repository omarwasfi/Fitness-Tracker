
<MudContainer Style="margin-top: 10px;">
    <MudTable Items="ExerciseActions"  Filter="new Func<ExerciseActionDataViewModel,bool>(FilterFunc1)" Hover="true" Breakpoint="Breakpoint.Sm">
           <ToolBarContent>
                <MudText Typo="Typo.h6">Exercises</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
        <HeaderContent>
            <MudTh>Index</MudTh>
            <MudTh>Exercise name</MudTh>
            <MudTh>Sets</MudTh>
            <MudTh>Reps</MudTh>
            <MudTh>Time</MudTh>
            <MudTh>RestTime</MudTh>
            <MudTh>Note</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Index">@context.Index</MudTd>
            <MudTd DataLabel="Exercise name">
                @context.Exercise.Name
            </MudTd>
            <MudTd DataLabel="Sets">
                @context.Sets
            </MudTd>
            <MudTd DataLabel="Reps">
                @context.Reps
            </MudTd>
            <MudTd DataLabel="Time">
                @context.Time
            </MudTd>
            <MudTd DataLabel="RestTime">
                @context.RestTime 
            </MudTd>
            <MudTd DataLabel="Note">
                @context.Note 
            </MudTd>
    
        </RowTemplate>
    </MudTable>
</MudContainer>
@code {
    [CascadingParameter(Name = "ExerciseActions")]
    private List<ExerciseActionDataViewModel> ExerciseActions { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ExerciseActions = ExerciseActions.OrderBy(x => x.Index).ToList();
    }

    private string searchString = "";

    private bool FilterFunc1(ExerciseActionDataViewModel element) => FilterFunc(element, searchString);

    private bool FilterFunc(ExerciseActionDataViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Index.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Exercise.Name} {element.Note} ".Contains(searchString))
            return true;
        return false;
    }
}
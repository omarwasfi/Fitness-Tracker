@inherits LayoutComponentBase
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject ISnackbar _snackBar
@inject IConfiguration Configuration





<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Welcome to CM</MudText>
        <MudSpacer />
        @if (AuthenticationService.Token == null)
        {

            <MudIconButton Href="login" Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" Edge="Edge.End" />



        }
        else
        {

            <MudIconButton Href="contacts" Icon="@Icons.Material.Filled.Contacts" Color="Color.Inherit" Edge="Edge.End" />

            <MudIconButton Href="logout" Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" />

        }

        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">CM</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="hubConnection">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>




@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    protected override async Task OnInitializedAsync()
    {
        await AuthenticationService.Initialize();
        if (AuthenticationService.Token != null && String.IsNullOrWhiteSpace(AuthenticationService.Token.Token) == false)
        {
            try
            {
                hubConnection = new HubConnectionBuilder().WithUrl(
                   Configuration.GetSection("ApiUrl").Value + "chathub"
                   , options =>
                   {
                       options.AccessTokenProvider = () => Task.FromResult(AuthenticationService.Token.Token);
                   }
                   )
                   .WithAutomaticReconnect()
                   .Build();
                await hubConnection.StartAsync();
                hubConnection.On<string, string>("ReceiveChatNotification", (message, roomId) =>
                {

                    _snackBar.Add(message, Severity.Info, config =>
                    {
                        config.VisibleStateDuration = 10000;
                        config.HideTransitionDuration = 500;
                        config.ShowTransitionDuration = 500;
                        config.Action = "Chat?";
                        config.ActionColor = Color.Info;
                        config.Onclick = snackbar =>
                        {
                            NavigationManager.NavigateTo($"chat/{roomId}");
                            return Task.CompletedTask;
                        };
                    });

                });
            }
            catch
            {
                _snackBar.Add("Couldn't connect to the signalR hub", Severity.Error, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;


                });
            }

        }
        else
        {
            _snackBar.Add("Couldn't connect to the signalR hub, Please login", Severity.Info, config =>
            {
                config.VisibleStateDuration = 10000;
                config.HideTransitionDuration = 500;
                config.ShowTransitionDuration = 500;


            });
        }




    }
}
